from Oprocess import *


class Vector():
    def __init__(self, x, y1, y2, y3, y4, y5, y6, y7, y8):
        self.x = x
        self.y1 = y1
        self.y2 = y2
        self.y3 = y3
        self.y4 = y4
        self.y5 = y5
        self.y6 = y6
        self.y7 = y7
        self.y8 = y8

    def __add__(self, other):
        return Vector(self.x + other.x, self.y1 + other.y1, self.y2 + other.y2, self.y3 + other.y3, self.y4 + other.y4,
                      self.y5 + other.y5, self.y6 + other.y6, self.y7 + other.y7, self.y8 + other.y8)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y1 - other.y1, self.y2 - other.y2, self.y3 - other.y3, self.y4 - other.y4,
                      self.y5 - other.y5, self.y6 - other.y6, self.y7 - other.y7, self.y8 - other.y8)


class particle():
    def __init__(self, pos, max_pos, v, l, pn, pr, hour, ln, limite):
        self.pos = pos
        self.max_pos = max_pos
        self.v = v
        self.max_profit = 0
        self.l = l
        self.pn = pn
        self.pr = pr
        self.hour = hour
        self.ln = ln
        self.limite = limite

    def update(self, globle_max_pos, w):
        '''

        :param globle_max_pos:
        :param w: the weight
        :return:
        '''
        self.v = Vector(w * self.v.x, w * self.v.y1, w * self.v.y2, w * self.v.y3, w * self.v.y4, w * self.v.y5,
                        w * self.v.y6, w * self.v.y7, w * self.v.y8) + Vector(
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).x,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y1,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y2,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y3,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y4,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y5,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y6,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y7,
            2 * random.uniform(0, 1) * (globle_max_pos - self.pos).y8) + Vector(
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).x,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y1,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y2,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y3,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y4,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y5,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y6,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y7,
            3 * random.uniform(0, 1) * (self.max_pos - self.pos).y8)
        self.pos = self.pos + self.v
        if self.pos.x < 0:
            self.pos.x = 0
        if self.pos.y1 < 100:
            self.pos.y1 = 100
        if self.pos.y2 < 100:
            self.pos.y2 = 100
        if self.pos.y3 < 100:
            self.pos.y3 = 100
        if self.pos.y4 < 100:
            self.pos.y4 = 100
        if self.pos.y5 < 100:
            self.pos.y5 = 100
        if self.pos.y6 < 100:
            self.pos.y6 = 100
        if self.pos.y7 < 100:
            self.pos.y7 = 100
        if self.pos.y8 < 100:
            self.pos.y8 = 100
        if self.pos.x > self.limite[self.hour]:
            self.pos.x = self.limite[self.hour]
        if self.v.x > 100:
            self.v.x = 100
        if self.v.x < -100:
            self.v.x = -100
        if self.v.y1 > 100:
            self.v.y1 = 100
        if self.v.y1 < -100:
            self.v.y1 = -100
        if self.v.y2 > 100:
            self.v.y2 = 100
        if self.v.y2 < -100:
            self.v.y2 = -100
        if self.v.y3 > 100:
            self.v.y3 = 100
        if self.v.y3 < -100:
            self.v.y3 = -100
        if self.v.y4 > 100:
            self.v.y4 = 100
        if self.v.y4 < -100:
            self.v.y4 = -100
        if self.v.y5 > 100:
            self.v.y5 = 100
        if self.v.y5 < -100:
            self.v.y5 = -100
        if self.v.y6 > 100:
            self.v.y6 = 100
        if self.v.y6 < -100:
            self.v.y6 = -100
        if self.v.y7 > 100:
            self.v.y7 = 100
        if self.v.y7 < -100:
            self.v.y7 = -100
        if self.v.y8 > 100:
            self.v.y8 = 100
        if self.v.y8 < -100:
            self.v.y8 = -100

        self.get_self_profit()

    def get_self_profit(self):
        '''
        the profit func of the on-demand instance and the spot-instance number's profit
        :return:
        '''
        profit, xx, yy = ICOAO(self.l, self.hour, self.pn, self.pr, self.pos.x,
                               [self.pos.y1, self.pos.y2, self.pos.y3, self.pos.y4, self.pos.y5, self.pos.y6,
                                self.pos.y7, self.pos.y8], self.ln)
        if self.max_profit < profit:
            self.max_profit = profit
            self.max_pos = self.pos


class Particle_Pool():
    def __init__(self, ln):
        self.pool = []
        self.globle_max = 0
        self.globle_max_pos = Vector(0,0,0,0,0,0,0,0,0)
        self.ln = ln

    def init_first_max_pos_and_profiit(self):
        for index in self.pool:
            index.get_self_profit()
            if index.max_profit > self.globle_max:
                self.globle_max = index.max_profit
                self.globle_max_pos = index.max_pos

    def update(self, w):
        for index in self.pool:
            index.update(self.globle_max_pos, w)

        for index in self.pool:
            if index.max_profit > self.globle_max:
                self.globle_max = index.max_profit
                self.globle_max_pos = index.max_pos


def OPOS(l, hour, pn, pr, ln, limite):
    init_pos_OD = np.random.randint(100, 200, 10)
    init_pos_SI = np.random.randint(400, 500, 80)

    pp = Particle_Pool(ln)
    for num in range(len(init_pos_OD)):
        pp.pool.append(
            particle(Vector(init_pos_OD[num], init_pos_SI[num*8], init_pos_SI[num*8+1], init_pos_SI[num*8+2], init_pos_SI[num*8+3], init_pos_SI[num*8+4],
                            init_pos_SI[num*8+5],init_pos_SI[num*8+6],init_pos_SI[num*8+7]),
                     Vector(init_pos_OD[num], init_pos_SI[num*8], init_pos_SI[num*8+1], init_pos_SI[num*8+2], init_pos_SI[num*8+3], init_pos_SI[num*8+4],
                            init_pos_SI[num*8+5],init_pos_SI[num*8+6],init_pos_SI[num*8+7]),
                     Vector(0, 0,0,0,0,0,0,0,0),
                     l,
                     pn,
                     pr,
                     hour,
                     ln,
                     limite)
        )

    pp.init_first_max_pos_and_profiit()
    iter_time = 0
    max_iter_time = 300

    while iter_time <= max_iter_time:
        w = 1.0 - iter_time * (1.0 - 0.2) / 150

        pp.update(w)
        iter_time += 1
    print('============================================================')
    return pp.globle_max_pos, pp.globle_max
# [522.767368571521, 522.767368571521, 522.767368571521, 522.767368571521, 522.767368571521, 522.767368571521, 522.767368571521, 522.767368571521, 530.9928941612513, 530.9928941612513, 530.9928941612513, 530.9928941612513, 530.9928941612513, 530.9928941612513, 530.9928941612513, 530.9928941612513, 446.63000963748607, 446.63000963748607, 446.63000963748607, 446.63000963748607, 446.63000963748607, 446.63000963748607, 446.63000963748607, 446.63000963748607, 256.97879037718036, 256.97879037718036, 256.97879037718036, 256.97879037718036, 256.97879037718036, 256.97879037718036, 256.97879037718036, 256.97879037718036, 505.0293891061985, 505.0293891061985, 505.0293891061985, 505.0293891061985, 505.0293891061985, 505.0293891061985, 505.0293891061985, 505.0293891061985, 698.840732903901, 698.840732903901, 698.840732903901, 698.840732903901, 698.840732903901, 698.840732903901, 698.840732903901, 698.840732903901]
# [177.598185796852, 613.6086253114156, 0, 573.6001467112526, 0, 528.6607596172666, 316.16259754653424, 513.2861737169178, 0, 99.70935841642986, 301.98911476128234, 176.13938662738462, 722.7354412626381, 0, 388.00320375290113, 194.398425954697, 0, 544.5817368432606, 0, 1548.591142694727, 129.79005565748326, 548.115501397015, 303.7778434443113, 674.0606499013156, 746.9065399998756, 640.0958794011322, 1074.3856106541966, 0, 712.5226843798525, 916.284662132909, 983.8082238928273, 1093.0469003917292, 267.70564060513595, 0, 365.25243344911945, 535.6454898698954, 521.5204843757512, 212.15279856452466, 656.7770407506003, 180.42943912862225, 0, 0, 0, 364.1583376101141, 251.08163486498995, 0, 0, 135.83581669930675]
# [334.7844333690647, 309.2755272568374, 317.7147481619643, 353.97989854599587, 325.9951856022173, 326.68745065249254]

# [1369.732318518058, 1369.732318518058, 1369.732318518058, 1369.732318518058, 1369.732318518058, 1369.732318518058, 1369.732318518058, 1369.732318518058, 659.3409061413155, 659.3409061413155, 659.3409061413155, 659.3409061413155, 659.3409061413155, 659.3409061413155, 659.3409061413155, 659.3409061413155, 495.3299530211542, 495.3299530211542, 495.3299530211542, 495.3299530211542, 495.3299530211542, 495.3299530211542, 495.3299530211542, 495.3299530211542, 577.7688462153222, 577.7688462153222, 577.7688462153222, 577.7688462153222, 577.7688462153222, 577.7688462153222, 577.7688462153222, 577.7688462153222, 434.18899335121006, 434.18899335121006, 434.18899335121006, 434.18899335121006, 434.18899335121006, 434.18899335121006, 434.18899335121006, 434.18899335121006, 769.3647441424667, 769.3647441424667, 769.3647441424667, 769.3647441424667, 769.3647441424667, 769.3647441424667, 769.3647441424667, 769.3647441424667]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74.29873968329906, 244.14539887361485, 228.4079806560803, 0, 0, 48.12529549287563, 129.3890829581783, 201.65008536078068, 125.06197024355785, 719.0371661454276, 188.2919363191781, 326.1566873962554, 318.1305005336955, 617.7731078034211, 0, 556.2207569066156, 297.12786989160975, 230.3581148791141, 126.1162121937311, 0, 728.3146280884562, 395.49834583132605, 213.25408626688764, 0, 699.8980524317759, 481.1424921456484, 763.0818322183617, 0, 877.5971660251421, 478.27987042152705, 0, 0, 97.42703416168763, 304.93031776490267, 0, 0, 0, 0]
# [328.12931820912513, 305.6904314628467, 319.1555360655365, 342.91995656226374, 326.8250036087929, 325.86567733541796]

# [708.9551312901705, 708.9551312901705, 708.9551312901705, 708.9551312901705, 708.9551312901705, 708.9551312901705, 708.9551312901705, 708.9551312901705, 585.2561505722889, 585.2561505722889, 585.2561505722889, 585.2561505722889, 585.2561505722889, 585.2561505722889, 585.2561505722889, 585.2561505722889, 449.47142247264185, 449.47142247264185, 449.47142247264185, 449.47142247264185, 449.47142247264185, 449.47142247264185, 449.47142247264185, 449.47142247264185, 644.5717869214417, 644.5717869214417, 644.5717869214417, 644.5717869214417, 644.5717869214417, 644.5717869214417, 644.5717869214417, 644.5717869214417, 673.8781091088814, 673.8781091088814, 673.8781091088814, 673.8781091088814, 673.8781091088814, 673.8781091088814, 673.8781091088814, 673.8781091088814, 589.9226094579786, 589.9226094579786, 589.9226094579786, 589.9226094579786, 589.9226094579786, 589.9226094579786, 589.9226094579786, 589.9226094579786]
# [8.715575194178829, 0, 297.44724456933636, 0, 73.35640064085092, 0, 173.701144031836, 279.0270099585563, 0, 0, 96.42170295802147, 447.6226394853994, 229.39489615256355, 212.51890797639055, 51.068005395213596, 212.28539076231425, 248.2468978038615, 0, 290.93134214007074, 833.791426337226, 375.19249297389445, 281.5235880252134, 655.2071918861866, 570.6067241133933, 0, 237.58120088262424, 557.5306560295201, 20.73375384095027, 85.13417030620266, 310.17873093259476, 0, 584.31841375764, 0, 0.09913576354316977, 0, 569.1966154892316, 0, 317.0340900317338, 0, 0, 0, 0, 0, 712.7772233350025, 397.64241182673595, 0, 201.83391566235505, 423.7217633692554]
# [328.6915315021188, 307.04658224992, 319.2038574690786, 339.78092899869137, 321.8725627367869, 328.94455101052387]

# [569.162577401926, 569.162577401926, 569.162577401926, 569.162577401926, 569.162577401926, 569.162577401926, 569.162577401926, 569.162577401926, 466.3756230591579, 466.3756230591579, 466.3756230591579, 466.3756230591579, 466.3756230591579, 466.3756230591579, 466.3756230591579, 466.3756230591579, 413.2200754689144, 413.2200754689144, 413.2200754689144, 413.2200754689144, 413.2200754689144, 413.2200754689144, 413.2200754689144, 413.2200754689144, 407.9194048183671, 407.9194048183671, 407.9194048183671, 407.9194048183671, 407.9194048183671, 407.9194048183671, 407.9194048183671, 407.9194048183671, 625.9675089117005, 625.9675089117005, 625.9675089117005, 625.9675089117005, 625.9675089117005, 625.9675089117005, 625.9675089117005, 625.9675089117005, 248.18443089316196, 248.18443089316196, 248.18443089316196, 248.18443089316196, 248.18443089316196, 248.18443089316196, 248.18443089316196, 248.18443089316196]
# [0, 518.5904657915497, 120.99963023276037, 349.7350177658758, 459.8848477388958, 390.55053804903065, 0, 434.87534728530636, 0, 260.9905165501264, 407.91320946450793, 270.6460102732004, 631.0642036308132, 509.6865330639924, 281.03678357660374, 340.55928614222313, 370.5761826732333, 0, 717.300030560765, 533.8818171411717, 508.6040310836175, 523.0424057449441, 100.43003577897203, 1060.6325257701724, 278.38820820715046, 737.7162354672914, 785.3340150037171, 215.853340866815, 199.67103512981177, 458.03323694698713, 642.8564140096876, 1068.8324751384607, 0, 0, 392.34083254048653, 406.73446210932644, 0, 0, 420.7537554178135, 61.80744594029859, 292.14332286062546, 228.8203429190364, 609.3779415540215, 1826.0860059916106, 676.175293256236, 0, 1408.7519114323488, 947.5601965035555]
# [331.93031524221794, 311.22115710564503, 320.9455721769726, 347.6987239601103, 321.9755578888022, 339.64018289465554]
#
# [1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 1149.5493549718235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 1172.9968465410032, 0, 0, 0, 0, 0, 0, 0, 0, 381.1202400495375, 381.1202400495375, 381.1202400495375, 381.1202400495375, 381.1202400495375, 381.1202400495375, 381.1202400495375, 381.1202400495375]
# [0, 0, 0, 0, 0, 0, 0, 0, 931.3822140401634, 0.0, 1172.315755871423, 898.8309661368345, 2283.499420417894, 789.6970580447144, 635.5972815794723, 1587.6588089513155, 962.073426433308, 243.87213254082818, 808.5570693829451, 1447.768380789295, 1495.3597077879554, 582.7963369290638, 1263.8434957733223, 1834.6572807601674, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 2089.97618894459, 0.0, 1879.2889113511999, 1005.4040818632204, 1970.969417050289, 641.1462894394575, 1563.884885988607, 0.0, 289.5757606162835, 1016.9137369192997, 21.435103983086865, 1257.9411014515663, 0.0, 481.79115689950976, 1290.1627147879212]
# [328.12931820912513, 327.3286124491178, 335.8860315276646, 336.8118420858639, 341.75409022881973, 335.2666568195921]

